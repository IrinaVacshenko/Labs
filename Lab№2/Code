import random
import numpy as np
import math

variant = 4
m = 5
x1_min_max = [15, 45]
x2_min_max = [30, 80]
y_min_max = [(20 - variant)*10, (30 - variant)*10]
x_table = [[x1_min_max[0], x2_min_max[0]],
            [x1_min_max[0], x2_min_max[1]],
            [x1_min_max[1], x2_min_max[0]]]

Probability = (0.99, 0.98, 0.95, 0.90)
Rkr = {2: (1.73, 1.72, 1.71, 1.69),
             6: (2.16, 2.13, 2.10, 2.00),
             8: (2.43, 4.37, 2.27, 2.17),
             10: (2.62, 2.54, 2.41, 2.29),
             12: (2.75, 2.66, 2.52, 2.39),
             15: (2.9, 2.8, 2.64, 2.49),
             20: (3.08, 2.96, 2.78, 2.62)}


y_matrix = np.random.randint(*y_min_max, size=(3, m))

labels_table = ["x1", "x2"] + ["y{}".format(i+1) for i in range(m)]
rows_table = [x_table[i] + list(y_matrix[i]) for i in range(3)]

y_avarg = [sum(y_matrix[i][j] for j in range(m)) / m for i in range(3)]
y_var = np.var(y_matrix, axis=1)
sigma_teta = np.sqrt((2 * (2 * m - 2)) / m * (m - 4))


Fuv_n = [y_var[0]/y_var[1], y_var[2]/y_var[0], y_var[2]/y_var[1]]
Sigma_tn = [((m - 2))/m * Fuv_n[num] for num in range(3)]
R_n = [abs(Sigma_tn[num] - 1)/sigma_teta for num in range(3)]


def odnoridna_dispersion():
    M = min(Rkr, key=lambda x: abs(x - m))
    p = 0
    for ruv in (R_n[0], R_n[1], R_n[2]):
        if ruv > Rkr[M][0]:
            return "неоднорідна"
        for rkr in range(len(Rkr[M])):
            if ruv < Rkr[M][rkr]:
                p = rkr
    return f"однорідна p = {Probability[p]}"

mx1 = (-1 + 1 - 1) / 3
mx2 = (-1 - 1 + 1) / 3
my = sum(y_avarg) / 3

a1 = (1 + 1 + 1) / 3
a2 = (1 - 1 - 1) / 3
a3 = (1 + 1 + 1) / 3
a11 = (-1 * y_avarg[0] + 1 * y_avarg[1] - 1 * y_avarg[2]) / 3
a22 = (-1 * y_avarg[0] - 1 * y_avarg[1] + 1 * y_avarg[2]) / 3

B_n = np.linalg.solve([[1, mx1, mx2],
                    [mx1, a1, a2],
                    [mx2, a2, a3]],
                    [my, a11, a22])


def chack_norm_equation():
    x1_2 = [-1, 1]
    norm_equation = [round((B_n[0] + B_n[1]*x1_2[0] + B_n[2]*x1_2[0]), 2),
                     round((B_n[0] + B_n[1]*x1_2[1] + B_n[2]*x1_2[0]), 2),
                     round((B_n[0] + B_n[1]*x1_2[0] + B_n[2]*x1_2[1]), 2)]
    if norm_equation[0] != y_avarg[0] and norm_equation[1] != y_avarg[1] and norm_equation[2] != y_avarg[2]:
        print("Нормаване рівняння регресії НЕ сходяться")
    return norm_equation

#Проведемо натуралізацію коефіцієнтів:
dx1 = math.fabs(x1_min_max[1] - x1_min_max[0]) / 2
dx2 = math.fabs(x2_min_max[1] - x2_min_max[0]) / 2

x10 = (x1_min_max[1] + x1_min_max[0]) / 2
x20 = (x2_min_max[1] + x2_min_max[0]) / 2

a_0 = B_n[0] - B_n[1] * x10/dx1 - B_n[2] * x20/dx2
a_1 = B_n[1]/dx1
a_2 = B_n[2]/dx2


#Запишемо натуралізоване рівняння регресії:
natyraliz_Y = [round((a_0 + a_1*x1_min_max[0] + a_2*x2_min_max[0]),2),
               round((a_0 + a_1*x1_min_max[1] + a_2*x2_min_max[0]),2),
               round((a_0 + a_1*x1_min_max[0] + a_2*x2_min_max[1]),2)]



print("->Нормована матриця<-")
print((" "*4).join(labels_table))
print("\n".join([" ".join(map(lambda j: "{:<5}".format(j), rows_table[i])) for i in range(len(rows_table))]))
print("\t")
print("σθ:", sigma_teta)
print("Fuv_n:", Fuv_n)
print("σn:", Sigma_tn)
print("Ruv:", R_n)
print()
print("Дисперсія", odnoridna_dispersion())
print()
print("Натуралізовані коефіцієнти", [a_0, a_1, a_2])
print()
print("Середне Y:", y_avarg)
print("Натуралізоване рівняння регресії:", natyraliz_Y)
print("Нормоване рівняння регресії: ", chack_norm_equation())
